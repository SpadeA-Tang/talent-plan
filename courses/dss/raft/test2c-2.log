[3] becomes candidate at term 1
[4] grant vote for 3 at term 0 candidate[3]'s log (index 0, term 0), follower[4]'s log (index0, term0)
[4] becomes follower at term 1 commit index 0
[0] grant vote for 3 at term 0 candidate[3]'s log (index 0, term 0), follower[0]'s log (index0, term0)
[0] becomes follower at term 1 commit index 0
[3] received vote from 4 at term 1
[2] grant vote for 3 at term 0 candidate[3]'s log (index 0, term 0), follower[2]'s log (index0, term0)
[2] becomes follower at term 1 commit index 0
[3] received vote from 0 at term 1
[1] grant vote for 3 at term 0 candidate[3]'s log (index 0, term 0), follower[1]'s log (index0, term0)
[1] becomes follower at term 1 commit index 0
[3] becomes leader at term 1
[0] becomes follower at term 1 commit index 0
[1] becomes follower at term 1 commit index 0
[2] becomes follower at term 1 commit index 0
[4] becomes follower at term 1 commit index 0
[3] start command of index 1 and term 1
[3] send entries from 1 to 1 to peer 0
[0] receive entries(1 - 1) from [3] with term 1 and commit index 0
[0] conflict_index 1 self.commit_index 0
[0] success append entry from 1 to 1
[3] send entries from 1 to 1 to peer 1
[1] receive entries(1 - 1) from [3] with term 1 and commit index 0
[1] conflict_index 1 self.commit_index 0
[1] success append entry from 1 to 1
[3] send entries from 1 to 1 to peer 2
[2] receive entries(1 - 1) from [3] with term 1 and commit index 0
[2] conflict_index 1 self.commit_index 0
[2] success append entry from 1 to 1
[3] send entries from 1 to 1 to peer 4
[4] receive entries(1 - 1) from [3] with term 1 and commit index 0
[4] conflict_index 1 self.commit_index 0
[4] success append entry from 1 to 1
[3] received append resp AppendEntryReply { id: 0, success: true, term: 1, index: 1 }
[3] received append resp AppendEntryReply { id: 1, success: true, term: 1, index: 1 }
[3] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 132, 205, 131, 219, 207, 230, 236, 187, 24] }
[3] received append resp AppendEntryReply { id: 2, success: true, term: 1, index: 1 }
[3] received append resp AppendEntryReply { id: 4, success: true, term: 1, index: 1 }
[3] start command of index 2 and term 1
[3] send entries from 2 to 2 to peer 0
[0] receive entries(2 - 2) from [3] with term 1 and commit index 1
[0] conflict_index 2 self.commit_index 0
[0] success append entry from 2 to 2
[3] send entries from 2 to 2 to peer 1
[1] receive entries(2 - 2) from [3] with term 1 and commit index 1
[1] conflict_index 2 self.commit_index 0
[1] success append entry from 2 to 2
[0] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 132, 205, 131, 219, 207, 230, 236, 187, 24] }
[3] send entries from 2 to 2 to peer 2
[1] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 132, 205, 131, 219, 207, 230, 236, 187, 24] }
[2] receive entries(2 - 2) from [3] with term 1 and commit index 1
[2] conflict_index 2 self.commit_index 0
[2] success append entry from 2 to 2
[3] send entries from 2 to 2 to peer 4
[4] receive entries(2 - 2) from [3] with term 1 and commit index 1
[4] conflict_index 2 self.commit_index 0
[4] success append entry from 2 to 2
[2] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 132, 205, 131, 219, 207, 230, 236, 187, 24] }
[3] received append resp AppendEntryReply { id: 0, success: true, term: 1, index: 2 }
[4] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 132, 205, 131, 219, 207, 230, 236, 187, 24] }
[3] received append resp AppendEntryReply { id: 2, success: true, term: 1, index: 2 }
[3] received append resp AppendEntryReply { id: 4, success: true, term: 1, index: 2 }
disconnect(3)
[3] apply worker exit
[3] background worker exit
[3] kill finish
[4] becomes candidate at term 2
[0] grant vote for 4 at term 1 candidate[4]'s log (index 2, term 1), follower[0]'s log (index2, term1)
[0] becomes follower at term 2 commit index 1
[1] grant vote for 4 at term 1 candidate[4]'s log (index 2, term 1), follower[1]'s log (index2, term1)
[4] received vote from 0 at term 2
[1] becomes follower at term 2 commit index 1
[2] grant vote for 4 at term 1 candidate[4]'s log (index 2, term 1), follower[2]'s log (index2, term1)
[4] received vote from 1 at term 2
[2] becomes follower at term 2 commit index 1
[4] becomes leader at term 2
[4] start command of index 3 and term 2
[0] becomes follower at term 2 commit index 1
[1] becomes follower at term 2 commit index 1
[4] send entries from 3 to 3 to peer 0
[2] becomes follower at term 2 commit index 1
[4] send entries from 3 to 3 to peer 1
[1] receive entries(3 - 3) from [4] with term 2 and commit index 1
[1] conflict_index 3 self.commit_index 1
[1] success append entry from 3 to 3
[0] receive entries(3 - 3) from [4] with term 2 and commit index 1
[2] receive entries(3 - 3) from [4] with term 2 and commit index 1
[2] conflict_index 3 self.commit_index 1
[2] success append entry from 3 to 3
[0] conflict_index 3 self.commit_index 1
[0] success append entry from 3 to 3
[4] send entries from 3 to 3 to peer 2
[4] send entries from 3 to 3 to peer 3
[4] received append resp AppendEntryReply { id: 1, success: true, term: 2, index: 3 }
[4] received append resp AppendEntryReply { id: 2, success: true, term: 2, index: 3 }
[4] update commit index to 3 with ent Entry { term: 2, index: 3, data: [160, 6, 223, 242, 211, 237, 168, 221, 187, 254, 214, 1] }
[4] received append resp AppendEntryReply { id: 0, success: true, term: 2, index: 3 }
disconnect(4)        
[4] apply worker exit
[4] background worker exit
[4] kill finish
[2] becomes candidate at term 3
[0] grant vote for 2 at term 2 candidate[2]'s log (index 3, term 2), follower[0]'s log (index3, term2)
[0] becomes follower at term 3 commit index 1
[1] grant vote for 2 at term 2 candidate[2]'s log (index 3, term 2), follower[1]'s log (index3, term2)
[1] becomes follower at term 3 commit index 1
[2] received vote from 0 at term 3
[2] received vote from 1 at term 3
[2] becomes leader at term 3
[2] start command of index 4 and term 3
[2] send entries from 4 to 4 to peer 0
[0] receive entries(4 - 4) from [2] with term 3 and commit index 1
[0] conflict_index 4 self.commit_index 1
[0] success append entry from 4 to 4
[2] send entries from 4 to 4 to peer 1
[1] receive entries(4 - 4) from [2] with term 3 and commit index 1
[1] conflict_index 4 self.commit_index 1
[1] success append entry from 4 to 4
[2] send entries from 4 to 4 to peer 3
[2] send entries from 4 to 4 to peer 4
[2] received append resp AppendEntryReply { id: 0, success: true, term: 3, index: 4 }
[2] received append resp AppendEntryReply { id: 1, success: true, term: 3, index: 4 }
[2] update commit index to 4 with ent Entry { term: 3, index: 4, data: [160, 6, 189, 204, 238, 166, 195, 191, 208, 211, 79] }
disconnect(2)
[0] becomes follower at term 3 commit index 1
[1] becomes follower at term 3 commit index 1
[2] apply worker exit
[2] background worker exit
[2] kill finish
disconnect(3)
connect(3)
[3] becomes candidate at term 2
[0] reject vote for 3 at term 3
[1] reject vote for 3 at term 3
[1] becomes candidate at term 4
[3] grant vote for 1 at term 2 candidate[1]'s log (index 4, term 3), follower[3]'s log (index2, term1)
[0] grant vote for 1 at term 3 candidate[1]'s log (index 4, term 3), follower[0]'s log (index4, term3)
[0] becomes follower at term 4 commit index 4
[3] becomes follower at term 4 commit index 0
[1] received vote from 0 at term 4
[1] received vote from 3 at term 4
[1] becomes leader at term 4
[0] becomes follower at term 4 commit index 4
[3] becomes follower at term 4 commit index 0
[3] becomes follower at term 4 commit index 0
[0] becomes follower at term 4 commit index 4
[3] becomes follower at term 4 commit index 0
[0] becomes follower at term 4 commit index 4
[3] becomes follower at term 4 commit index 0
[1] start command of index 5 and term 4
[1] send entries from 5 to 5 to peer 0
[0] receive entries(5 - 5) from [1] with term 4 and commit index 4
[0] conflict_index 5 self.commit_index 4
[0] success append entry from 5 to 5
[1] send entries from 5 to 5 to peer 2
[1] send entries from 5 to 5 to peer 3
[3] receive entries(5 - 5) from [1] with term 4 and commit index 4
[3] (last_index 2, last_term 1) has not match index with [1] (prev_index 4, prev_term3)
[1] send entries from 5 to 5 to peer 4
[1] received append resp AppendEntryReply { id: 0, success: true, term: 4, index: 5 }
[1] received append resp AppendEntryReply { id: 3, success: false, term: 4, index: 2 }
[1] send entries from 2 to 5 to peer 3
[3] receive entries(2 - 5) from [1] with term 4 and commit index 4
[3] conflict_index 3 self.commit_index 0
[3] success append entry from 3 to 5
[3] update commit index to 4 with ent Entry { term: 3, index: 4, data: [160, 6, 189, 204, 238, 166, 195, 191, 208, 211, 79] }
[1] received append resp AppendEntryReply { id: 3, success: true, term: 4, index: 5 }
[1] update commit index to 5 with ent Entry { term: 4, index: 5, data: [160, 6, 242, 188, 174, 243, 138, 227, 218, 151, 224, 1] }
disconnect(1)
[1] apply worker exit
[1] background worker exit
[1] kill finish
disconnect(1)
connect(1)
[1] becomes candidate at term 5
[0] grant vote for 1 at term 4 candidate[1]'s log (index 5, term 4), follower[0]'s log (index5, term4)
[0] becomes follower at term 5 commit index 4
[3] grant vote for 1 at term 4 candidate[1]'s log (index 5, term 4), follower[3]'s log (index5, term4)
[3] becomes follower at term 5 commit index 4
[1] received vote from 0 at term 5
[1] received vote from 3 at term 5
[1] becomes leader at term 5
[0] becomes follower at term 5 commit index 4
[3] becomes follower at term 5 commit index 4
[0] becomes follower at term 5 commit index 4
[3] becomes follower at term 5 commit index 4
[1] start command of index 6 and term 5
[1] send entries from 6 to 6 to peer 0
[0] receive entries(6 - 6) from [1] with term 5 and commit index 0
[0] conflict_index 6 self.commit_index 4
[0] success append entry from 6 to 6
[1] send entries from 6 to 6 to peer 2
[1] send entries from 6 to 6 to peer 3
[3] receive entries(6 - 6) from [1] with term 5 and commit index 0
[3] conflict_index 6 self.commit_index 4
[3] success append entry from 6 to 6
[1] send entries from 6 to 6 to peer 4
[1] received append resp AppendEntryReply { id: 0, success: true, term: 5, index: 6 }
[1] received append resp AppendEntryReply { id: 3, success: true, term: 5, index: 6 }
[1] update commit index to 6 with ent Entry { term: 5, index: 6, data: [160, 6, 210, 188, 217, 131, 156, 252, 149, 228, 197, 1] }
disconnect(1)
[1] apply worker exit
[1] background worker exit
[1] kill finish
disconnect(4)
connect(4)
[0] becomes candidate at term 6
[4] grant vote for 0 at term 2 candidate[0]'s log (index 6, term 5), follower[4]'s log (index3, term2)
[4] becomes follower at term 6 commit index 0
[3] grant vote for 0 at term 5 candidate[0]'s log (index 6, term 5), follower[3]'s log (index6, term5)
[3] becomes follower at term 6 commit index 4
[0] received vote from 4 at term 6
[0] received vote from 3 at term 6
[0] becomes leader at term 6
[0] start command of index 7 and term 6
[0] send entries from 7 to 7 to peer 1
[0] send entries from 7 to 7 to peer 2
[0] send entries from 7 to 7 to peer 3
[3] receive entries(7 - 7) from [0] with term 6 and commit index 4
[3] conflict_index 7 self.commit_index 4
[3] success append entry from 7 to 7
[0] send entries from 7 to 7 to peer 4
[4] receive entries(7 - 7) from [0] with term 6 and commit index 4
[4] (last_index 3, last_term 2) has not match index with [0] (prev_index 6, prev_term5)
[0] received append resp AppendEntryReply { id: 3, success: true, term: 6, index: 7 }
[0] received append resp AppendEntryReply { id: 4, success: false, term: 6, index: 3 }
[0] send entries from 3 to 7 to peer 4
[4] receive entries(3 - 7) from [0] with term 6 and commit index 4
[4] conflict_index 4 self.commit_index 0
[4] success append entry from 4 to 7
[4] update commit index to 4 with ent Entry { term: 3, index: 4, data: [160, 6, 189, 204, 238, 166, 195, 191, 208, 211, 79] }
[0] received append resp AppendEntryReply { id: 4, success: true, term: 6, index: 7 }
[0] update commit index to 7 with ent Entry { term: 6, index: 7, data: [160, 6, 132, 135, 227, 157, 132, 210, 185, 198, 52] }
disconnect(0)
[3] becomes follower at term 6 commit index 4
[4] becomes follower at term 6 commit index 4
[0] apply worker exit
[0] background worker exit
[0] kill finish

disconnect(1)
connect(1)
[1] becomes candidate at term 6
[3] grant vote for 1 at term 6 candidate[1]'s log (index 6, term 5), follower[3]'s log (index7, term6)
[3] becomes follower at term 6 commit index 7
[4] grant vote for 1 at term 6 candidate[1]'s log (index 6, term 5), follower[4]'s log (index7, term6)
[4] becomes follower at term 6 commit index 7
[1] received vote from 3 at term 6
[1] received vote from 4 at term 6
[1] becomes leader at term 6
[1] start command of index 7 and term 6
[3] becomes follower at term 6 commit index 7
[4] becomes follower at term 6 commit index 7
[1] send entries from 7 to 7 to peer 0
[1] send entries from 7 to 7 to peer 2
[1] send entries from 7 to 7 to peer 3
[3] receive entries(7 - 7) from [1] with term 6 and commit index 0
[3] conflict_index 0 self.commit_index 7
[4] receive entries(7 - 7) from [1] with term 6 and commit index 0
[4] conflict_index 0 self.commit_index 7
[1] send entries from 7 to 7 to peer 4
[1] received append resp AppendEntryReply { id: 3, success: true, term: 6, index: 7 }
[1] received append resp AppendEntryReply { id: 4, success: true, term: 6, index: 7 }
[1] update commit index to 7 with ent Entry { term: 6, index: 7, data: [160, 6, 213, 222, 143, 247, 188, 229, 170, 174, 13] }
thread '<unnamed>' panicked at 'commit index=7 server=1 Entry { x: 962832624993431381 } != server=0 Entry { x: 3786654893997605764 }', raft\src\raft\config.rs:419:29
stack backtrace:
disconnect(1)
[1] apply worker exit
   0: std::panicking::begin_panic_handler
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:515
   1: std::panicking::begin_panic_fmt
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:457
   2: raft::raft::config::impl$1::start1_ext::closure$0
             at .\src\raft\config.rs:419
   3: futures_util::stream::stream::for_each::impl$4::poll<futures_channel::mpsc::UnboundedReceiver<enum$<raft::raft::raft::ApplyMsg> >,futures_util::future::ready::Ready<tuple$<> >,raft::raft::config::impl$1::start1_ext::closure$0>       
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-util-0.3.4\src\stream\stream\for_each.rs:79
   4: futures_task::future_obj::impl$4::poll<tuple$<> >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-task-0.3.4\src\future_obj.rs:86
   5: futures_task::future_obj::impl$10::poll<tuple$<> >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-task-0.3.4\src\future_obj.rs:133
   6: futures_util::future::future::FutureExt::poll_unpin<futures_task::future_obj::FutureObj<tuple$<> > >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-util-0.3.4\src\future\future\mod.rs:507
   7: futures_executor::thread_pool::Task::run
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:324
   8: futures_executor::thread_pool::PoolState::work
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:158
   9: futures_executor::thread_pool::impl$8::create::closure$0
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:286
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
[1] background worker exit
[1] kill finish
disconnect(2)