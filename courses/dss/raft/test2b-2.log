[1] becomes candidate at term 1
[0] grant vote for 1 at term 0
[2] grant vote for 1 at term 0
[0] becomes follower at term 1
[2] becomes follower at term 1
[1] received vote from 0 at term 1
[1] becomes leader at term 1
[1] start command of index 1 and term 1
[0] becomes follower at term 1
[2] becomes follower at term 1
[1] send entries from 1 to 1 to peer 0
[0] receive entries(1 - 1) from [1] with term 1 and commit index 0
[0] conflict_index 1 self.commit_index 0
[2] receive entries(1 - 1) from [1] with term 1 and commit index 0
[2] conflict_index 1 self.commit_index 0
[1] send entries from 1 to 1 to peer 2
[1] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 101] }
[0] becomes follower at term 1
[2] becomes follower at term 1
[2] becomes follower at term 1
[0] becomes follower at term 1
[0] becomes follower at term 1
[2] becomes follower at term 1
[2] becomes follower at term 1
[0] becomes follower at term 1
disconnect(1)
[1] start command of index 2 and term 1
[1] send entries from 2 to 2 to peer 0
[1] send entries from 2 to 2 to peer 2
[1] start command of index 3 and term 1
[1] send entries from 2 to 3 to peer 0
[1] send entries from 2 to 3 to peer 2
[1] start command of index 4 and term 1
[1] send entries from 2 to 4 to peer 0
[1] send entries from 2 to 4 to peer 2
[2] becomes candidate at term 2
[0] grant vote for 2 at term 1
[0] becomes follower at term 2
[2] received vote from 0 at term 2
[2] becomes leader at term 2
[0] becomes follower at term 2
[2] start command of index 2 and term 2
[2] send entries from 2 to 2 to peer 0
[0] receive entries(2 - 2) from [2] with term 2 and commit index 1
[0] conflict_index 2 self.commit_index 1
[2] send entries from 2 to 2 to peer 1
[2] update commit index to 2 with ent Entry { term: 2, index: 2, data: [160, 6, 103] }
[0] becomes follower at term 2
[0] becomes follower at term 2
[0] becomes follower at term 2
disconnect(2)
connect(1)
[1] start command of index 5 and term 1
[1] send entries from 2 to 5 to peer 0
[0] receive entries(2 - 5) from [1] with term 1 and commit index 1
[1] send entries from 2 to 5 to peer 2
[1] becomes follower at term 2
[1] becomes candidate at term 3
Voter's log (term 1, index 5) is not update to date than votee's log (term 2, index 2)
[0] reject vote for 1 at term 2
[0] becomes follower at term 3
[1] received vote from 0 at term 3
[1] becomes follower at term 3
[0] becomes candidate at term 4
[1] grant vote for 0 at term 3
[1] becomes follower at term 4
[0] received vote from 1 at term 4
[0] becomes leader at term 4
[1] becomes follower at term 4
thread '<unnamed>' panicked at 'commit index=2 server=1 Entry { x: 102 } != server=0 Entry { x: 103 }', raft\src\raft\config.rs:416:29
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:515
   1: std::panicking::begin_panic_fmt
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:457
   2: raft::raft::config::impl$1::start1_ext::closure$0
[0] start command of index 3 and term 4
             at [0] send entries from 3 to 3 to peer 1
.[1] receive entries(3 - 3) from [0] with term 4 and commit index 2
\[1] (last_index 5, last_term 1) has not match index with [0] (prev_index 2, prev_term2)
src\raft\config.rs[0] send entries from 3 to 3 to peer 2
:[0] send entries from 2 to 3 to peer 1
416[1] receive entries(2 - 3) from [0] with term 4 and commit index 2

[1] conflict_index 2 self.commit_index 2
[0] update commit index to 3 with ent Entry { term: 4, index: 3, data: [160, 6, 104] }
   3: futures_util::stream::stream::for_each::impl$4::poll<futures_channel::mpsc::UnboundedReceiver<enum$<raft::raft::raft::ApplyMsg> >,futures_util::future::ready::Ready<tuple$<> >,raft::raft::config::impl$1::start1_ext::closure$0>