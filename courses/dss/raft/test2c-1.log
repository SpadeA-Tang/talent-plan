[4] becomes candidate at term 1
[1] grant vote for 4 at term 0
[1] becomes follower at term 1 commit index 0
[0] grant vote for 4 at term 0
[0] becomes follower at term 1 commit index 0
[4] received vote from 1 at term 1
[4] received vote from 0 at term 1
[3] grant vote for 4 at term 0
[3] becomes follower at term 1 commit index 0
[4] becomes leader at term 1
[2] grant vote for 4 at term 0
[4] start command of index 1 and term 1
[4] send entries from 1 to 1 to peer 0
[4] send entries from 1 to 1 to peer 1
[0] receive entries(1 - 1) from [4] with term 1 and commit index 0
[0] conflict_index 1 self.commit_index 0
[0] success append entry from 1 to 1
[1] receive entries(1 - 1) from [4] with term 1 and commit index 0
[1] conflict_index 1 self.commit_index 0
[1] success append entry from 1 to 1
[4] send entries from 1 to 1 to peer 2
[2] receive entries(1 - 1) from [4] with term 1 and commit index 0
[2] conflict_index 1 self.commit_index 0
[2] success append entry from 1 to 1
[4] send entries from 1 to 1 to peer 3
[3] receive entries(1 - 1) from [4] with term 1 and commit index 0
[3] conflict_index 1 self.commit_index 0
[3] success append entry from 1 to 1
[4] received append resp AppendEntryReply { id: 0, success: true, term: 1, index: 1 }
[4] received append resp AppendEntryReply { id: 1, success: true, term: 1, index: 1 }
[4] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[4] received append resp AppendEntryReply { id: 2, success: true, term: 1, index: 1 }
[4] received append resp AppendEntryReply { id: 3, success: true, term: 1, index: 1 }
[4] start command of index 2 and term 1
[4] send entries from 2 to 2 to peer 0
[0] receive entries(2 - 2) from [4] with term 1 and commit index 1
[0] conflict_index 2 self.commit_index 0
[0] success append entry from 2 to 2
[0] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[1] receive entries(2 - 2) from [4] with term 1 and commit index 1
[1] conflict_index 2 self.commit_index 0
[1] success append entry from 2 to 2
[4] send entries from 2 to 2 to peer 1
[1] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[4] send entries from 2 to 2 to peer 2
[2] receive entries(2 - 2) from [4] with term 1 and commit index 1
[2] conflict_index 2 self.commit_index 0
[2] success append entry from 2 to 2
[4] send entries from 2 to 2 to peer 3
[3] receive entries(2 - 2) from [4] with term 1 and commit index 1
[3] conflict_index 2 self.commit_index 0
[3] success append entry from 2 to 2
[2] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[4] received append resp AppendEntryReply { id: 0, success: true, term: 1, index: 2 }
[3] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[4] received append resp AppendEntryReply { id: 1, success: true, term: 1, index: 2 }
[4] update commit index to 2 with ent Entry { term: 1, index: 2, data: [160, 6, 168, 158, 215, 249, 253, 151, 167, 249, 77] }
[4] received append resp AppendEntryReply { id: 2, success: true, term: 1, index: 2 }
[4] received append resp AppendEntryReply { id: 3, success: true, term: 1, index: 2 }
disconnect(4)
[4] apply worker exit
[4] background worker exit
[4] kill finish
[3] becomes candidate at term 2
[0] grant vote for 3 at term 1
[0] becomes follower at term 2 commit index 1
[1] grant vote for 3 at term 1
[1] becomes follower at term 2 commit index 1
[2] grant vote for 3 at term 1
[2] becomes follower at term 2 commit index 1
[3] received vote from 0 at term 2
[3] received vote from 1 at term 2
[3] becomes leader at term 2
[1] becomes follower at term 2 commit index 1
[0] becomes follower at term 2 commit index 1
[2] becomes follower at term 2 commit index 1
[3] start command of index 3 and term 2
[3] send entries from 3 to 3 to peer 0
[0] receive entries(3 - 3) from [3] with term 2 and commit index 1
[0] conflict_index 3 self.commit_index 1
[0] success append entry from 3 to 3
[3] send entries from 3 to 3 to peer 1
[1] receive entries(3 - 3) from [3] with term 2 and commit index 1
[1] conflict_index 3 self.commit_index 1
[1] success append entry from 3 to 3
[3] send entries from 3 to 3 to peer 2
[2] receive entries(3 - 3) from [3] with term 2 and commit index 1
[3] send entries from 3 to 3 to peer 4
[2] conflict_index 3 self.commit_index 1
[2] success append entry from 3 to 3
[3] received append resp AppendEntryReply { id: 0, success: true, term: 2, index: 3 }
[3] received append resp AppendEntryReply { id: 1, success: true, term: 2, index: 3 }
[3] update commit index to 3 with ent Entry { term: 2, index: 3, data: [160, 6, 146, 159, 179, 221, 206, 161, 141, 184, 43] }
[3] received append resp AppendEntryReply { id: 2, success: true, term: 2, index: 3 }
disconnect(3)
[3] apply worker exit
[3] background worker exit
[3] kill finish
[0] becomes candidate at term 3
[1] grant vote for 0 at term 2
[1] becomes follower at term 3 commit index 1
[2] grant vote for 0 at term 2
[2] becomes follower at term 3 commit index 1
[0] received vote from 1 at term 3
[0] received vote from 2 at term 3
[0] becomes leader at term 3
[1] becomes follower at term 3 commit index 1
[2] becomes follower at term 3 commit index 1
[0] start command of index 4 and term 3
[0] send entries from 4 to 4 to peer 1
[0] send entries from 4 to 4 to peer 2
[1] receive entries(4 - 4) from [0] with term 3 and commit index 1
[1] conflict_index 4 self.commit_index 1
[1] success append entry from 4 to 4
[2] receive entries(4 - 4) from [0] with term 3 and commit index 1
[2] conflict_index 4 self.commit_index 1
[2] success append entry from 4 to 4
[0] send entries from 4 to 4 to peer 3
[0] send entries from 4 to 4 to peer 4
[0] received append resp AppendEntryReply { id: 1, success: true, term: 3, index: 4 }
[0] received append resp AppendEntryReply { id: 2, success: true, term: 3, index: 4 }
[0] update commit index to 4 with ent Entry { term: 3, index: 4, data: [160, 6, 160, 197, 131, 163, 251, 220, 243, 209, 109] }
disconnect(0)
[0] apply worker exit
[0] background worker exit
[0] kill finish
disconnect(4)
connect(4)
[4] becomes candidate at term 2
[1] reject vote for 4 at term 3
[2] reject vote for 4 at term 3
[2] becomes candidate at term 4
[4] grant vote for 2 at term 2
[4] becomes follower at term 4 commit index 0
[1] grant vote for 2 at term 3
[1] becomes follower at term 4 commit index 1
[2] received vote from 4 at term 4
[2] received vote from 1 at term 4
[2] becomes leader at term 4


[2] start command of index 5 and term 4
[2] send entries from 5 to 5 to peer 0
[2] send entries from 5 to 5 to peer 1

这里 leader 2 start log entry 5 并发送append req给followers

[1] receive entries(5 - 5) from [2] with term 4 and commit index 1
[1] conflict_index 5 self.commit_index 1
[1] success append entry from 5 to 5

follower 1 接受了 log entry 5

[2] send entries from 5 to 5 to peer 3
[2] send entries from 5 to 5 to peer 4
[4] receive entries(5 - 5) from [2] with term 4 and commit index 1
[4] (last_index 2, last_term 1) has not match index with [2] (prev_index 4, prev_term3)
[2] received append resp AppendEntryReply { id: 1, success: true, term: 4, index: 5 }
[2] received append resp AppendEntryReply { id: 4, success: false, term: 4, index: 2 }
[2] send entries from 2 to 5 to peer 4
[4] receive entries(2 - 5) from [2] with term 4 and commit index 1
[4] conflict_index 3 self.commit_index 0
[4] success append entry from 3 to 5

follower 4 接受了 log entry 5

[4] update commit index to 1 with ent Entry { term: 1, index: 1, data: [160, 6, 144, 236, 216, 134, 217, 249, 184, 209, 159, 1] }
[2] received append resp AppendEntryReply { id: 4, success: true, term: 4, index: 5 }
[2] update commit index to 5 with ent Entry { term: 4, index: 5, data: [160, 6, 216, 195, 163, 139, 129, 188, 154, 177, 15] }

leader 2 成功收到 follower 1 和 4的回复 所以commit了 log entry 5

这意味着下面server 0不应该被选为leader

[4] becomes follower at term 4 commit index 1
[1] becomes follower at term 4 commit index 1
[1] becomes follower at term 4 commit index 5
[4] becomes follower at term 4 commit index 5



disconnect(2)
[2] apply worker exit
[2] background worker exit
[2] kill finish
disconnect(0)
connect(0)


[0] becomes candidate at term 4
[1] grant vote for 0 at term 4
[1] becomes follower at term 4 commit index 5
[4] grant vote for 0 at term 4
[4] becomes follower at term 4 commit index 5

这里有两个问题：
1. [1]和[4]已经处于term 4并且给之前的[2]投过票，所以不应该给同处于term4的[0]投票
2. [0]的log不应该满足up to date的条件

1. bug在于，在become_follower的代码中，将self.note置为none了，这里应该判断term是否有变化
2. 还是vote的机制出现了问题，判断条件为
if (req.term > self.term && self.log_up_to_date(req.log_term, req.log_index))
    || (self.term == req.term && (self.vote == Some(req.id as usize) || self.vote == None))
这里在 || 后面 None那里 也应该加上 log_up_date的限制



[0] received vote from 1 at term 4
[0] received vote from 4 at term 4
[0] becomes leader at term 4
[1] becomes follower at term 4 commit index 5
[4] becomes follower at term 4 commit index 5
[0] start command of index 5 and term 4
[0] send entries from 5 to 5 to peer 1
[1] receive entries(5 - 5) from [0] with term 4 and commit index 0
[1] conflict_index 0 self.commit_index 5
[0] send entries from 5 to 5 to peer 2
[0] send entries from 5 to 5 to peer 3
[0] send entries from 5 to 5 to peer 4
[4] receive entries(5 - 5) from [0] with term 4 and commit index 0
[4] conflict_index 0 self.commit_index 5
[0] received append resp AppendEntryReply { id: 1, success: true, term: 4, index: 5 }
disconnect(0)
[0] received append resp AppendEntryReply { id: 4, success: true, term: 4, index: 5 }
[0] update commit index to 5 with ent Entry { term: 4, index: 5, data: [160, 6, 211, 208, 166, 226, 142, 167, 235, 165, 135, 1] }
[0] apply worker exit
thread '<unnamed>' panicked at 'commit index=5 server=0 Entry { x: 9749076278367594579 } != server=1 Entry { x: 1108564869372240344 }', raft\src\raft\config.rs:419:29
stack backtrace:
[0] background worker exit
[0] kill finish
   0: std::panicking::begin_panic_handler
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:515
   1: std::panicking::begin_panic_fmt
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b\/library\std\src\panicking.rs:457
   2: raft::raft::config::impl$1::start1_ext::closure$0
             at .\src\raft\config.rs:419
   3: futures_util::stream::stream::for_each::impl$4::poll<futures_channel::mpsc::UnboundedReceiver<enum$<raft::raft::raft::ApplyMsg> >,futures_util::future::ready::Ready<tuple$<> >,raft::raft::config::impl$1::start1_ext::closure$0>       
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-util-0.3.4\src\stream\stream\for_each.rs:79
   4: futures_task::future_obj::impl$4::poll<tuple$<> >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-task-0.3.4\src\future_obj.rs:86
   5: futures_task::future_obj::impl$10::poll<tuple$<> >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-task-0.3.4\src\future_obj.rs:133
   6: futures_util::future::future::FutureExt::poll_unpin<futures_task::future_obj::FutureObj<tuple$<> > >
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-util-0.3.4\src\future\future\mod.rs:507
   7: futures_executor::thread_pool::Task::run
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:324
   8: futures_executor::thread_pool::PoolState::work
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:158
   9: futures_executor::thread_pool::impl$8::create::closure$0
             at C:\Users\SpadeA.DESKTOP-6H9Q71A\.cargo\registry\src\mirrors.ustc.edu.cn-61ef6e0cd06fb9b8\futures-executor-0.3.4\src\thread_pool.rs:286
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
disconnect(0)
connect(0)